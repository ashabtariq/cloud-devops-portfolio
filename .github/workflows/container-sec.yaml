name: CI/CD - FastAPI on AWS ECS (Fargate)

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '06-Container-Secuirty-Pipeline/**'   # ðŸ‘ˆ Run only if files in this folder change




  pull_request:
    branches:
      - main
    paths:
      - '06-Container-Secuirty-Pipeline/**'

jobs:
  Build-and-Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd 06-Container-Secuirty-Pipeline/api
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd 06-Container-Secuirty-Pipeline/api
          pytest

  Docker-Build-and-Scan:
    needs: Build-and-Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Create a Docker image from a Dockerfile
        run: |
          cd 06-Container-Secuirty-Pipeline/api && docker build -t ${{ secrets.DOCKER_USERNAME }}/python-api-aws:${{ github.event.inputs.tag || 'latest' }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
            image-ref: ${{ secrets.DOCKER_USERNAME }}/python-api-aws:${{ github.event.inputs.tag || 'latest' }}
            format: 'sarif'
            scan-type: 'image'
            exit-code: '0U'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
            output: 'trivy-results.sarif'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2 # Use the latest stable version
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Save Docker image as artifact
        run: docker save ${{ secrets.DOCKER_USERNAME }}/python-api-aws:${{ github.event.inputs.tag || 'latest' }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar


    ##################################
    #OPTIONAL DOCKER HUB PUSH         # 
    ##################################
  Docker-Build-and-Push:
      needs: Docker-Build-and-Scan
      runs-on: ubuntu-latest

      steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: docker ${{ secrets.DOCKER_USERNAME }}/python-api-aws:${{ github.event.inputs.tag || 'latest' }} # Replace with your actual image name and tag
      
      
        # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #       context: ./06-Container-Secuirty-Pipeline/api
      #       push: true
      #       tags: ${{ secrets.DOCKER_USERNAME }}/python-api-aws:${{ github.event.inputs.tag || 'latest' }}
        
      

        

  #   ###################################
  #   #     AMAZON ECR                  # 
  #   ###################################
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Log in to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     - name: Build, tag, and push Docker image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # <-- Uncomment this line for private Repo 
  #         #ECR_REGISTRY: public.ecr.aws  
  #         ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} #<-- UNCOMMENT FOR PRIVATE
  #         #ECR_PUBLIC_REPOSITORY: #${{ secrets.ECR_PUBLIC_REPOSITORY }}   
  #         IMAGE_TAG: latest
  #       run: |
  #         FULL_IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG 
  #         echo "Building and pushing $FULL_IMAGE"
  #         docker build -t $FULL_IMAGE ./02-cicd-github-EC2/api
  #         docker push $FULL_IMAGE
    
      

  # deploy-to-ecs:
  #   needs: docker-build-and-push
  #   runs-on: ubuntu-latest

  #   steps:

  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Register ECS Task Definition
  #       run: |
  #         aws ecs register-task-definition \
  #           --cli-input-json file://./02-cicd-github-EC2/ecs-task-def.json


  #     - name: Deploy to Amazon ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ./02-cicd-github-EC2/ecs-task-def.json
  #         service: ${{ secrets.ECS_SERVICE }}
  #         cluster: ${{ secrets.ECS_CLUSTER }}
  #         wait-for-service-stability: true

  #     - name: Check Deployment Status
  #       run: |
  #         STATUS=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} \
  #           --query "services[0].deployments[?status=='PRIMARY'].rolloutState" --output text)
  #         echo "Rollout state: $STATUS"
  #         if [ "$STATUS" != "COMPLETED" ]; then
  #           echo "Deployment failed, rolling back..."
  #           # Optional: manually force previous task definition
  #           PREV_TASK=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} \
  #             --query "services[0].taskDefinition" --output text)
  #           aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --task-definition $PREV_TASK --force-new-deployment
  #           exit 1
  #         fi
